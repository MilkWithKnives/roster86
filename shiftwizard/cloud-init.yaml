#cloud-config

# Roster86 Enterprise SaaS - Cloud-Init Deployment
# Optimized for Ubuntu 25.04 on Vultr VPS
# This script automatically deploys Roster86 when the server boots

package_update: true
package_upgrade: true

packages:
  - curl
  - wget
  - unzip
  - git
  - htop
  - ufw
  - ca-certificates
  - gnupg
  - lsb-release
  - openssl

users:
  - name: roster86
    groups: [adm, docker, sudo]
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIeXSyDYxoRn8N2NPIAonWwf4ji2Bqx/ZAFH5KOsqJLw ryan.champion2@icloud.com

write_files:
  - path: /home/roster86/.env
    owner: roster86:roster86
    permissions: "0600"
    content: |
      NODE_ENV=production
      PORT=3001
      JWT_SECRET=REPLACE_WITH_SECURE_32_CHAR_HEX_STRING
      DATABASE_PATH=./data/database.sqlite
      CORS_ORIGIN=https://yourdomain.com
      RATE_LIMIT_WINDOW_MS=900000
      RATE_LIMIT_MAX_REQUESTS=100

  - path: /home/roster86/docker-compose.yml
    owner: roster86:roster86
    permissions: "0644"
    content: |
      version: '3.8'

      services:
        roster86:
          build: .
          ports:
            - "3001:3001"
          environment:
            - NODE_ENV=production
            - JWT_SECRET=${JWT_SECRET}
            - PORT=3001
          volumes:
            - ./data:/app/backend/data
            - ./logs:/app/logs
          restart: unless-stopped
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
            interval: 30s
            timeout: 10s
            retries: 3

        nginx:
          image: nginx:alpine
          ports:
            - "80:80"
            - "443:443"
          volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./dist:/usr/share/nginx/html
            - ./ssl:/etc/nginx/ssl
          depends_on:
            - roster86
          restart: unless-stopped

  - path: /home/roster86/deploy.sh
    owner: roster86:roster86
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      echo "🚀 Roster86 Cloud-Init Deployment Starting..."

      # Generate secure JWT secret
      JWT_SECRET=$(openssl rand -hex 32)
      sed -i "s/REPLACE_WITH_SECURE_32_CHAR_HEX_STRING/$JWT_SECRET/" /home/roster86/.env

      # Clone Roster86 repository
      cd /home/roster86
      git clone https://github.com/MilkWithKnives/roster86.git app
      cd app

      # Copy configuration files
      cp /home/roster86/.env .env
      cp /home/roster86/docker-compose.yml .

      # Create necessary directories
      mkdir -p data logs ssl

      # Generate self-signed SSL certificate
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout ssl/key.pem \
          -out ssl/cert.pem \
          -subj "/C=US/ST=State/L=City/O=Roster86/CN=$(curl -s ifconfig.me)"

      # Set permissions
      chown -R roster86:roster86 /home/roster86

      # Build and start services
      docker compose up -d --build

      # Wait for services to start
      sleep 30

      # Initialize database
      docker compose exec -T roster86 node backend/scripts/init-db.js
      docker compose exec -T roster86 node backend/scripts/seed-db.js

      echo "✅ Roster86 deployment completed!"
      echo "🌐 Your SaaS is live at: https://$(curl -s ifconfig.me)"

runcmd:
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - usermod -aG docker roster86

  # Configure firewall
  - ufw allow ssh
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw --force enable

  # Setup automatic backups
  - |
    cat > /home/roster86/backup.sh << 'EOF'
    #!/bin/bash
    BACKUP_DIR="/home/roster86/backups"
    DATE=$(date +%Y%m%d_%H%M%S)
    mkdir -p $BACKUP_DIR
    cd /home/roster86/app
    docker compose exec -T roster86 cp /app/backend/database.sqlite /app/backend/data/
    tar -czf $BACKUP_DIR/roster86_backup_$DATE.tar.gz data/
    find $BACKUP_DIR -name "roster86_backup_*.tar.gz" -mtime +7 -delete
    EOF
  - chmod +x /home/roster86/backup.sh
  - chown roster86:roster86 /home/roster86/backup.sh

  # Setup daily backup cron job
  - echo "0 2 * * * /home/roster86/backup.sh" | crontab -u roster86 -

  # Deploy Roster86
  - sudo -u roster86 /home/roster86/deploy.sh

final_message: |
  ✅ Roster86 Enterprise SaaS deployment completed!

  🔐 SSH Access: ssh roster86@YOUR_SERVER_IP
  🌐 Web Access: https://YOUR_SERVER_IP
  📊 Admin Login: admin@roster86.com / CHANGE_DEFAULT_PASSWORD

  📋 Next Steps:
  1. Point your domain to this server IP
  2. Update SSL certificates with Let's Encrypt
  3. Change default admin password
  4. Configure your environment variables

  🛠️ Management:
  - View logs: docker compose logs -f
  - Restart: docker compose restart
  - Update: git pull && docker compose up -d --build
